(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{459:function(s,a,t){"use strict";t.r(a);var e=t(3),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("Boxx"),s._v(" "),t("p",[s._v("找出某个Java进程中最耗费CPU的Java线程并定位堆栈信息，用到的命令有：ps、top、printf、jstack、grep。")]),s._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#问题原因"}},[s._v("问题原因")])]),t("li",[t("a",{attrs:{href:"#排查步骤"}},[s._v("排查步骤")]),t("ul",[t("li",[t("a",{attrs:{href:"#jps"}},[s._v("jps")])]),t("li",[t("a",{attrs:{href:"#jstack"}},[s._v("jstack")])])])]),t("li",[t("a",{attrs:{href:"#其他问题排查"}},[s._v("其他问题排查")])]),t("li",[t("a",{attrs:{href:"#相关脚本"}},[s._v("相关脚本")])])])]),t("p"),s._v(" "),t("h2",{attrs:{id:"问题原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题原因"}},[s._v("#")]),s._v(" 问题原因")]),s._v(" "),t("p",[s._v("现实企业级Java应用开发、维护中，有时候我们会碰到下面这些问题：")]),s._v(" "),t("ul",[t("li",[s._v("OutOfMemoryError，内存不足")]),s._v(" "),t("li",[s._v("内存泄露")]),s._v(" "),t("li",[s._v("线程死锁")]),s._v(" "),t("li",[s._v("锁争用（Lock Contention）")]),s._v(" "),t("li",[s._v("Java进程消耗CPU过高\n......")])]),s._v(" "),t("p",[s._v("这些问题在日常开发、维护中可能被很多人忽视（比如有的人遇到上面的问题只是重启服务器或者调大内存，而不会深究问题根源），但能够理解并解决这些问题是Java程序员进阶的必备要求。")]),s._v(" "),t("h2",{attrs:{id:"排查步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#排查步骤"}},[s._v("#")]),s._v(" 排查步骤")]),s._v(" "),t("h3",{attrs:{id:"jps"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jps"}},[s._v("#")]),s._v(" jps")]),s._v(" "),t("p",[s._v("jps主要用来输出JVM中运行的进程状态信息。语法格式如下：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("jps "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("options"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("hostid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果不指定hostid就默认为当前主机或服务器。")]),s._v(" "),t("p",[s._v("命令行参数选项说明如下：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("-q 不输出类名,Jar名和传入main方法的参数\n\n-m 输出传入main方法的参数\n\n-l 输出main类或Jar的全限名\n\n-v 输出传入JVM的参数\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[s._v("比如下面：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("root@ubuntu:/"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# jps -m -l")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2458")]),s._v(" org.artifactory.standalone.main.Main /usr/local/artifactory-2.2.5/etc/jetty.xml\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("29920")]),s._v(" com.sun.tools.hat.Main -port "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9998")]),s._v(" /tmp/dump.dat\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3149")]),s._v(" org.apache.catalina.startup.Bootstrap start\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("30972")]),s._v(" sun.tools.jps.Jps -m -l\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8247")]),s._v(" org.apache.catalina.startup.Bootstrap start\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("25687")]),s._v(" com.sun.tools.hat.Main -port "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9999")]),s._v(" dump.dat\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("21711")]),s._v(" mrf-center.jar\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("h3",{attrs:{id:"jstack"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jstack"}},[s._v("#")]),s._v(" jstack")]),s._v(" "),t("p",[s._v("jstack主要用来查看某个Java进程内的线程堆栈信息。语法格式如下：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("jstack "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("option"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" pid\njstack "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("option"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" executable core\njstack "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("option"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("server-id@"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("remote-hostname-or-ip\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("命令行参数选项说明如下：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 会打印出额外的锁信息")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在发生死锁时可以用 jstack -l pid 来观察锁持有情况")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -m mixed mode，不仅会输出Java堆栈信息，还会输出C/C++堆栈信息（比如Native方法）")]),s._v("\n-l long listings\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("jstack可以定位到线程堆栈，根据堆栈信息我们可以定位到具体代码，所以它在JVM性能调优中使用得非常多。")]),s._v(" "),t("p",[s._v("下面我们来一个实例找出某个Java进程中最耗费CPU的Java线程并定位堆栈信息，用到的命令有ps、top、printf、jstack、grep。")]),s._v(" "),t("hr"),s._v(" "),t("p",[t("strong",[s._v("第一步：")]),s._v(" 先找出Java进程ID，服务器上的Java应用名称为 wordcount.jar：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@storm-master home"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -ef "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" wordcount\nroot    "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2860")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2547")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),s._v(" 02:09 pts/0  00:02:03 java -jar wordcount.jar /home/input "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("得到进程ID为 2860 。")]),s._v(" "),t("hr"),s._v(" "),t("p",[t("strong",[s._v("第二步：")]),s._v(" 找出该进程内最耗费CPU的线程，可以使用如下3个命令，这里我们使用第3个命令得出如下结果：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("ps -Lfp pid ： 即 ps -Lfp 2860")])]),s._v(" "),t("li",[t("p",[s._v("ps -mp pid -o THREAD, tid, time ：即 ps -mp 2860 -o THREAD,tid,time")])]),s._v(" "),t("li",[t("p",[s._v("top -Hp pid： 即 "),t("strong",[s._v("top -Hp 2860")])])])]),s._v(" "),t("p",[s._v("这里用第三个命令："),t("code",[s._v("top -Hp 2860")])]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("top")]),s._v(" -Hp "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2860")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("输出如下：")]),s._v(" "),t("p",[t("img",{attrs:{src:"/znote/img/backend/ThreadTopCpuList.png",alt:"img"}})]),s._v(" "),t("p",[s._v("TIME列就是各个Java线程耗费的CPU时间，显然CPU时间最长的是ID为2968的线程，用")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("printf")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%x'),t("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[s._v("\\n")]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2968")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("得到2968的十六进制值为b98，下面会用到。")]),s._v(" "),t("hr"),s._v(" "),t("p",[t("strong",[s._v("第三步：")]),s._v(" 终于轮到jstack上场了，它用来输出进程2860的堆栈信息，然后根据线程ID的十六进制值grep，如下：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("root@storm-master home"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" jstack "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2860")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" b98 \n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"SessionTracker"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("prio")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("tid")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("0x00007f55a44e4800 "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("nid")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("0xb53 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" Object.wait"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("0x00007f558e06c000 \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("可以看到CPU消耗在SessionTracker这个类的Object.wait()，于是就能很容易的定位到相关的代码了。")]),s._v(" "),t("p",[s._v("当然，可以 "),t("code",[s._v("jstack -l pid > /tmp/thread.txt")]),s._v(" 在导出的文件中搜索，就可以定位到具体的线程，类。")]),s._v(" "),t("hr"),s._v(" "),t("h2",{attrs:{id:"其他问题排查"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他问题排查"}},[s._v("#")]),s._v(" 其他问题排查")]),s._v(" "),t("p",[t("strong",[s._v("查看某进程及某线程占用 CPU 的例子")])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("jps")]),s._v(": 列出 java 进程,找到 pid.")]),s._v(" "),t("li",[t("code",[s._v("pidstat -p pid -u 1 3 -u -t")]),s._v(": 查看 pid 的进程所有线程的 cpu 使用情况.")]),s._v(" "),t("li",[t("code",[s._v("jstack -l pid > /tmp/thread.txt")]),s._v(": 导出指定 Java 应用的所有线程.")])]),s._v(" "),t("p",[s._v("然后查看 "),t("code",[s._v("nid=xxx")]),s._v("(即第二步里线程号的线程),即可定位到某段代码.")]),s._v(" "),t("p",[t("strong",[s._v("查看某进程及某线程占用 IO 的例子")])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("jps")]),s._v(": 列出 java 进程,找到 pid.")]),s._v(" "),t("li",[t("code",[s._v("pidstat -p pid -u 1 3 -d -t")]),s._v(": 查看 pid 的进程所有线程的 IO 使用情况.")]),s._v(" "),t("li",[t("code",[s._v("jstack -l pid > /tmp/thread.txt")]),s._v(": 导出指定 Java 应用的所有线程.")])]),s._v(" "),t("p",[s._v("然后查看 "),t("code",[s._v("nid=xxx")]),s._v("(即第二步里线程号的线程),即可定位到某段代码.")]),s._v(" "),t("h2",{attrs:{id:"相关脚本"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相关脚本"}},[s._v("#")]),s._v(" 相关脚本")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("阿里开源的 Arthas")])]),s._v(" "),t("li",[t("p",[s._v("看了下有位大神提个 "),t("a",{attrs:{href:"https://github.com/emacsist/emacsist.github.io/issues/2",target:"_blank",rel:"noopener noreferrer"}},[s._v("issue"),t("OutboundLink")],1),s._v(" , 推荐了个自动化脚本, 亲测更好用点. 这样子就可以免去上面的一步一步地查找和计算了.\n所以, 这里也直接引用这个工具, 有需要的可以用下."),t("br"),s._v(" "),t("a",{attrs:{href:"https://github.com/oldratlee/useful-scripts/blob/master/docs/java.md#beer-show-busy-java-threads",target:"_blank",rel:"noopener noreferrer"}},[s._v("show-busy-java-threads"),t("OutboundLink")],1)])])])],1)}),[],!1,null,null,null);a.default=n.exports}}]);